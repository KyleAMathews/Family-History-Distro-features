<?php

/**
 * Implementation of hook_menu()
 */
function drupal_edit_menu() {
  $items = array();

  // Put your menu items here.
  $items['drupal-edit'] = array(
    'title' => 'edit nodes efficiently',
    'page callback' => 'drupal_edit_stuff',
    'page arguments' => array(),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['drupal-edit/next'] = array(
    'title' => 'hi',
    'page callback' => 'drupal_edit_next',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['drupal-edit/save'] = array(
    'title' => 'save me',
    'page callback' => 'drupal_edit_save',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function drupal_edit_stuff() {
  // Load CSS + JS built by Brunch.
  drupal_add_css(drupal_get_path('module', 'drupal_edit') . '/brunch/build/web/css/main.css');
  drupal_add_js(drupal_get_path('module', 'drupal_edit') . '/brunch/build/web/js/app.js');
  // Required by Stitch to start.
  drupal_add_js("require('main')", 'inline');
  return "<div id='home-view'></div>";
}

function drupal_edit_next() {
  global $user;

  // Fetch and load a random node.
  $nids = variable_get('to_process', array());
  $node = node_load(array_rand($nids));

  // Build and render.
  node_build_content($node);
  $node->rendered_body = drupal_render($node->content);

  // Add remaining count.
  $node->remaining = count($nids);

  // Render as Markdown.
  file_put_contents('/tmp/body2', $node->rendered_body);
  $script_path = realpath(drupal_get_path('module', 'drupal_edit') . '/html2text.py');
  $file_path  = '/tmp/body2';
  exec("python $script_path $file_path", $output);

  $output = implode("\n", $output);
  $node->markdown = $output;

  // Create link.
  $node->link = l($node->title, 'node/' . $node->nid);

  // Add list of completed nodes
  $completed = variable_get('drupal_edit_completed', array());
  $node->completed = $completed[$user->uid];
  $node->completed_count = count($completed[$user->uid]);

  $node->myuid = $user->uid;

  print drupal_json_output($node);
  exit();
}

function drupal_edit_save() {
  global $_POST;
  global $user;

  // Update the node.
  $node = node_load($_POST['nid']);
  $node->title = $_POST['title'];
  $node->body[$node->language][0]['value'] = $_POST['body'];
  $node->revision = 1;
  $node->log = "This node was updated by " . $user->name . " on " . date('c') .
    ' as part of the great content cleanup.';
  node_save($node);

  // Update records.
  $completed = variable_get('drupal_edit_completed', array());
  $completed[$user->uid][$node->nid] = array(
    'title' => $node->title,
    'link' => l($node->title, 'node/' . $node->nid),
  );
  variable_set('drupal_edit_completed', $completed);

  $todo = variable_get('to_process', array());
  unset($todo[$node->nid]);
  variable_set('to_process', $todo);

  print drupal_json_output(array('success' => TRUE));
  exit();
}

function drupal_edit_install() {
  $results = db_query("SELECT nid FROM node ORDER BY rand()");
  $to_process = array();
  foreach ($results as $row) {
    $to_process[$row->nid] = $row->nid;
  }
  variable_set('to_process', $to_process);
}

// If a node is deleted, remove it from the lists of nodes to edit.
function drupal_edit_node_delete($node) {
  $todo = variable_get('to_process', array());
  unset($todo[$node->nid]);
  variable_set('to_process', $todo);
}

<?php

require(drupal_get_path('module', 'fhd_person') . "/../adodb-time.inc.php");
/**
 * @file
 * Code related to fhd_person_mapping module. Yes, lame docs.
 */

/**
 * Implementation of hook_init().
 */
function fhd_person_mapping_init() {
  drupal_add_js(drupal_get_path('module', 'fhd_person_mapping') . "/fhd_person_mapping.js");
}

/**
 * Implementation of hook_menu()
 */
function fhd_person_mapping_menu() {
  $items = array();

  // ajax callback + autocomplete
  // Put your menu items here.
  $items['fhd-person-mapping/callback'] = array(
    'title' => 'Ajax callback',
    'type' => MENU_CALLBACK,
    'page callback' => '_fhd_person_mapping_ajax_callback',
    'access callback' => TRUE,
  );
  $items['fhd-person-mapping/autocomplete'] = array(
    'title' => 'autocomplete callback',
    'type' => MENU_CALLBACK,
    'page callback' => '_fhd_person_mapping_autocomplete',
    'access callback' => TRUE,
  );
  $items['fhd-person-mapping/not-tagged'] = array(
    'title' => 'Content pages without a person tag',
    'page callback' => 'fhd_person_not_tagged',
    'access callback' => TRUE,
  );


  return $items;
}


/**
 * Implementation of hook_theme()
 */
function fhd_person_mapping_theme() {
  return array(
    'fhd_person_mapping_block' => array(
      'template' => 'fhd_person_mapping_block',
      'variables' => array('person' => NULL, 'nid' => NULL),
    ),
    'fhd_person_mapping_tagged_block' => array(
      'template' => 'fhd_person_mapping_tagged_block',
      'variables' => array('nodes' => NULL),
    ),
  );
}

function template_preprocess_fhd_person_mapping_block(&$vars) {
  global $user;
  $person = $vars['person'];

  $vars['person_link'] = l($person->name, 'person/' . $person->pid);
  if (!empty($person->birth_date)) {
    $vars['birth_string'] = adodb_date('Y', $person->birth_date) . ' ' . check_plain($person->birth_place);
  }
  if (!empty($person->death_date)) {
    $vars['death_string'] = adodb_date('Y', $person->death_date) . ' ' . check_plain($person->death_place);
  }
}

function _fhd_person_mapping_ajax_callback() {
  // Do whatever is needed here
  if ($_REQUEST['action'] == 'remove') {
    fhd_person_mapping_delete($_REQUEST['nid'], $_REQUEST['pid']);
    exit();
  }

  print_r($_REQUEST);
  print "hello world";
  // Load block and print
}

/**
 * @todo Create a searchable column so we can do fulltext search. http://drupal.org/node/1317404
 **/
function _fhd_person_mapping_autocomplete($string) {
  $matches = array();

  // Other suggestions.
  $result = db_query_range("SELECT pid, name, birth_date
    FROM {fhd_person}
    WHERE LOWER(name)
    LIKE LOWER(:string)", 0, 25, array(
    ':string' => $string . '%',
  ));

  $persons = array();
  foreach ($result as $person) {
    $persons[] = $person;
  }
  usort($persons, "_fhd_cmp_persons");
  $persons = array_slice($persons, 0, 15);
  foreach ($persons as $person) {
    $matches[$person->name . '____' . $person->pid] = check_plain($person->name) . " b. " . adodb_date('Y', $person->birth_date);
  }
  if (module_exists('devel')) {
    $GLOBALS['devel_shutdown'] = FALSE;
  }

  drupal_json_output($matches);
}

function _fhd_cmp_persons($a, $b) {
  if ($a->birth_date == $b->birth_date) {
    return 0;
  }
  return ($a->birth_date < $b->birth_date) ? -1 : 1;
}

/**
 * Implementation of hook_block_info().
 */
function fhd_person_mapping_block_info() {
  $blocks['fhd_person_mapping_people'] = array(
    'info' => t('Associated People Block'),
  );
  $blocks['fhd_person_tagged_nodes'] = array(
    'info' => t('Nodes tagged with person'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fhd_person_mapping_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'fhd_person_mapping_people':
      $block = _fhd_person_mapping_people_block();
      break;
    case 'fhd_person_tagged_nodes':
      $block = _fhd_person_tagged_nodes_block();
      break;
  }
  return $block;
}

function _fhd_person_mapping_people_block() {
  $block['subject'] = "";
  $block['content'] = drupal_get_form('fhd_person_mapping_autocomplete');

  return $block;
}

function _fhd_person_tagged_nodes_block() {
  $block['subject'] = "";
  $pid = arg(1);
  $nodes = fhd_person_mapping_load_content($pid);

  $types = array();
  foreach ($nodes as $node) {
    $types[$node->type][] = $node;
  }
  $content = "";
  $count = 1;
  foreach ($types as $nodes) {
    $content .= theme('fhd_person_mapping_tagged_block', array('nodes' => $nodes));
    if($count % 3 === 0) {
      $content .= "<br style='clear:both' />";
    }
    $count++;
  }
  $block['content'] = $content;

  return $block;
}

function _fhd_person_mapping_related_person($nid) {
  $persons = fhd_person_mapping_load_people($nid);
  $content = "";
  $content .= "<div>";
  foreach ($persons as $person) {
    $content .= theme('fhd_person_mapping_block', array('person' => $person, 'nid' => $nid));
  }
  return $content;
}

function fhd_person_mapping_autocomplete() {
  $node = menu_get_object();
  global $user;

  $form = array();
  $form['#prefix'] = _fhd_person_mapping_related_person($node->nid);

  // If this a node and the user is logged in, add form elements to add new persons mapped to content.
  if (!empty($node->nid) && user_access('adminster content-person mappings')) {
    $form['person_field'] = array(
      '#prefix' => '<div class="add-person"><h3>Add person</h3>',
      '#type' => 'textfield',
      '#size' => '35',
      '#default_value' => '',
      '#autocomplete_path' => 'fhd-person-mapping/autocomplete',
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
      '#suffix' => '</div>',
    );
  }

  return $form;
}

function fhd_person_mapping_autocomplete_submit($form, &$form_state) {
  $node = menu_get_object();
  $pid = array_pop(explode('____', $form_state['values']['person_field']));

  fhd_person_mapping_create($node->nid, $pid);
  drupal_set_message('Person assigned successfully');

}

function fhd_person_not_tagged() {
  $result = db_query("SELECT nid,title FROM {node} WHERE nid not in (SELECT distinct nid FROM {fhd_content_person_mapping})");
  $items = array();
  foreach ($result as $record) {
    $items[] = l($record->title, "node/" . $record->nid);
  }

  return "<h2>" . count($items) . " pages left to tag!</h2><br />" . theme('item_list', array('items' => $items, 'The title!!!', 'ul'));
}

/************************
 *** Views Integration
 ************************/
function fhd_person_mapping_views_data() {
  $data['fhd_content_person_mapping']['table']['group'] = t('Person');
  $data['fhd_content_person_mapping']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
  );
  $data['fhd_content_person_mapping']['pid'] = array(
    'title' => t('Person ID'),
    'help' => t('The Person ID of the field'),
    'field' => array(
      'handler' => 'views_handler_field',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['fhd_content_person_mapping']['nid'] = array(
    'title' => t('Node'),
    'help' => t('The node ID of the mapped node'),
    'relationship' => array(
      'label' => t('Person'),
      'base' => 'node',
      'base field' => 'nid',
      'handler' => 'views_handler_relationship',
    ),
  );
  return $data;
}

function fhd_person_mapping_permission() {
  return array(
    'adminster content-person mappings' => array(
      'title' => t('Administer mappings between content and people'),
      'description' => t('Permission to create and delete mappings between a person and content.'),
    ),
  );
}

/****************************
 *** API Functions
 ***************************/

/**
 * Create new mapping.
 */
function fhd_person_mapping_create($nid, $pid) {
  if (user_access('adminster content-person mappings')) {
    return db_insert('fhd_content_person_mapping')
      ->fields(array(
        'nid' => $nid,
        'pid' => $pid,
      ))
      ->execute();
  }
}

/**
 * Load all entities related to a certain nid.
 */
function fhd_person_mapping_load_people($nid) {
  // Select all persons associated with this node.
  $result = db_query("SELECT pid FROM {fhd_content_person_mapping} WHERE nid = :nid",
    array(':nid' => $nid));

  return fhd_person_load_multiple($result->fetchCol());
}

/**
 * Delete mappings related to a nid.
 */
function fhd_person_mapping_delete_nid($nid) {
  if (user_access('adminster content-person mappings')) {
    return db_delete('fhd_content_person_mapping')
      ->condition('nid', $nid)
      ->execute();
  }
}

/**
 * Delete a nid/pid mapping.
 */
function fhd_person_mapping_delete($nid, $pid) {
  if (user_access('adminster content-person mappings')) {
    return db_delete('fhd_content_person_mapping')
      ->condition('nid', $nid)
      ->condition('pid', $pid)
      ->execute();
  }
}

/**
 * Load all node entities related to a person.
 */
function fhd_person_mapping_load_content($pid) {
  $query = db_select('fhd_content_person_mapping', 'm');
  $query->join('node', 'n', 'm.nid = n.nid');
  return $query->fields('n', array('nid', 'title', 'type'))
    ->condition('m.pid', $pid)
    ->addTag('node_access')
    ->execute()
    ->fetchAll();
}

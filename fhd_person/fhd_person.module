<?php

/**
 * @file
 * Test moduel for the entity API.
 */

/**
 * Implement hook_entity_info().
 */
function fhd_person_entity_info() {
  $return = array(
    'fhd_person' => array(
      'label' => t('Person'),
      'entity class' => 'FhdPerson',
      'controller class' => 'FhdPersonController',
      'base table' => 'fhd_person',
      'fieldable' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Full content'),
          'custom settings' => FALSE,
        ),
      ),
      'entity keys' => array(
        'id' => 'pid',
        'label' => 'Person',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'fhd_person',
    ),
  );
  return $return;
}

/**
 * Load multiple test entities based on certain conditions.
 *
 * @param $pids
 *   An array of entity IDs.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of test entity objects, indexed by pid.
 */
function fhd_person_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('fhd_person', $pids, $conditions, $reset);
}

/**
 * Delete multiple test entities.
 *
 * @param $pids
 *   An array of test entity IDs.
 */
function fhd_person_delete_multiple(array $pids) {
  entity_get_controller('fhd_person')->delete($pids);
}


/**
 * Main class for test entities.
 */
class FhdPerson extends Entity {

  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, $entityType);
  }

  /**
   * Override buildContent() to add the username to the output.
   */
  public function buildContent($view_mode = 'full', $langcode = NULL) {
    $content['user'] = array(
      '#markup' => "I was here",
    );
    return entity_get_controller($this->entityType)->buildContent($this, $view_mode, $langcode, $content);
  }

  /**
   * Specifies the default label, which is picked up by label() by default.
   */
  protected function defaultLabel() {
    $type = fhd_person_get_types($this->name);
    return $type->label;
  }

  /**
   * Specifies the default uri, which is picked up by uri() by default.
   */
  protected function defaultUri() {
    return array('path' => 'person/' . $this->identifier());
  }

  /**
   * Returns the full url() for the person.
   */
  public function url() {
    $uri = $this->uri();
    return url($uri['path']);
  }

  /**
   * Returns the drupal path to this person.
   */
  public function path() {
    $uri = $this->uri();
    return url($uri['path']);
  }
}


/**
 *
 *
 * Some hook implementations used by the tests.
 *
 *
 */


/**
 * Implements hook_entity_insert().
 */
function fhd_person_entity_insert($entity, $entity_type) {

}

/**
 * Implements hook_entity_update().
 */
function fhd_person_entity_update($entity, $entity_type) {

}

/**
 * Implements hook_entity_delete().
 */
function fhd_person_entity_delete($entity, $entity_type) {

}

/**
 * Getter callback for the 'reference' property.
 */
function fhd_person_entity_getter($node) {
  if (empty($node->entity)) {
    $node->entity = array('type' => 'user', 'id' => $node->uid);
  }
  // We have to return the entity wrapped.
  return entity_metadata_wrapper($node->entity['type'], $node->entity['id']);
}

/**
 * Setter callback for the 'reference' property.
 */
function fhd_person_entity_setter($node, $property_name, $wrapper) {
  // The entity has to be passed wrapped.
  $node->entity = array('type' => $wrapper->type(), 'id' => $wrapper->getIdentifier());
}

class FhdPersonController extends EntityAPIController {

   /**
    * Overridden.
    * @see DrupalDefaultEntityController#load($ids, $conditions)
    *
    * In contrast to the parent implementation we factor out query execution, so
    * fetching can be further customized easily. Also we add any in code defined
    * objects.
    */
   public function load($ids = array(), $conditions = array()) {
     $entities = parent::load($ids, $conditions);

     // If entities return nothing and conditions have an fs id set, then we'll
     // try to fetch that person from the FHS API and save them as a new entity.
     return $entities;
   }
}
